package uk.co.ziazoo.injector
{
	import de.polygonal.ds.TreeNode;
	
	import flash.utils.describeType;
	import flash.utils.getDefinitionByName;

	public class ReflectionParser implements IParser
	{
		public function ReflectionParser()
		{
		}
		
		public function buildDependencyTree( entryPoint:Class ):void
		{
			createNode( entryPoint );
			
		}
		
		internal function createNode( clazz:Class, parent:TreeNode = null ):void
		{
			var node:TreeNode = new TreeNode( clazz, parent );
			
			for each( var accessor:XML in describeType( clazz ).factory.accessor )
			{
				if( accessor.hasOwnProperty( "metadata" ) )
				{
					trace( accessor );
					for each( var metadata:XML in accessor.metadata )
					{
						if( metadata.@name )
						{
							// found a dependency of clazz
							//createNode( getClass( a )
						}
					}
				}
			}
		}
		
		internal function getClass( reflectedName:String ):Class
		{
			var name:String = reflectedName.replace( "::", "." );
			return getDefinitionByName( name ) as Class;
		}
	}
}